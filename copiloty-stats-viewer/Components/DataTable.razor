@using copiloty_stats_viewer.Models
@using copiloty_stats_viewer.Services
@inject DataService Data

<div class="card mb-3">
  <div class="card-body">
    <div class="d-flex justify-content-between align-items-center mb-2">
      <strong>Records (Grouped by User)</strong>
      <div class="d-flex align-items-center gap-3">
        <button class="btn btn-outline-primary btn-sm" @onclick="ToggleCompactView">
          <span class="oi oi-@(compactView ? "list" : "grid-two-up")" aria-hidden="true"></span>
          @(compactView ? "Detailed View" : "Compact View")
        </button>
        <input class="form-control w-auto" style="min-width:260px" placeholder="Search user/login..." @bind="search" />
      </div>
    </div>
    <div class="table-responsive">
      <table class="table table-sm table-hover">
        <thead>
          <tr>
            <th role="button" @onclick="() => SortBy(nameof(CopilotRecord.Day))">Day @SortIcon(nameof(CopilotRecord.Day))</th>
            <th role="button" @onclick="() => SortBy(nameof(CopilotRecord.UserLogin))">User @SortIcon(nameof(CopilotRecord.UserLogin))</th>
            <th class="text-end" role="button" @onclick='() => SortBy("Interactions")'>Interactions @SortIcon("Interactions")</th>
            <th class="text-end" role="button" @onclick='() => SortBy("Generations")'>Generations @SortIcon("Generations")</th>
            <th class="text-end" role="button" @onclick='() => SortBy("Acceptances")'>Acceptances @SortIcon("Acceptances")</th>
            <th class="text-end" role="button" @onclick='() => SortBy("CodeCompletion")'>Code Completion @SortIcon("CodeCompletion")</th>
            <th class="text-end" role="button" @onclick='() => SortBy("ChatAgent")'>Chat Agent @SortIcon("ChatAgent")</th>
            <th class="text-end" role="button" @onclick='() => SortBy("InlineChat")'>Inline Chat @SortIcon("InlineChat")</th>
            <th>Most Used Language</th>
            <th>Most Used Model</th>
            <th>@(compactView ? "Features" : "Feature Breakdown")</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var userGroup in GetUserGroups())
          {
            <!-- User group header row (clickable to expand/collapse) -->
            <tr class="table-secondary" role="button" @onclick="() => ToggleUserGroup(userGroup.User)" style="cursor: pointer;">
              <td colspan="2">
                <strong>
                  <span class="@(IsUserGroupExpanded(userGroup.User) ? "oi oi-chevron-bottom" : "oi oi-chevron-right")" aria-hidden="true"></span>
                  <span class="oi oi-person ms-1" aria-hidden="true"></span> @userGroup.User 
                  <small class="text-muted">(@userGroup.Records.Count() records)</small>
                </strong>
              </td>
              <td class="text-end"><strong>@userGroup.TotalInteractions.ToString("N0")</strong></td>
              <td class="text-end"><strong>@userGroup.TotalGenerations.ToString("N0")</strong></td>
              <td class="text-end"><strong>@userGroup.TotalAcceptances.ToString("N0")</strong></td>
              <td class="text-end"><strong>@userGroup.CodeCompletionGenerations.ToString("N0")</strong></td>
              <td class="text-end"><strong>@userGroup.ChatAgentGenerations.ToString("N0")</strong></td>
              <td class="text-end"><strong>@userGroup.InlineChatGenerations.ToString("N0")</strong></td>
              <td><strong>@userGroup.MostUsedLanguage</strong></td>
              <td><strong>@userGroup.MostUsedModel</strong></td>
              <td>
                @if (compactView)
                {
                  <small class="text-muted">
                    @string.Join(", ", userGroup.Records.SelectMany(r => r.TotalsByFeature.Select(f => DataService.GetFriendlyFeatureName(f.Feature))).Distinct())
                  </small>
                }
                else
                {
                  @RenderUserFeatureBreakdown(userGroup.Records)
                }
              </td>
            </tr>
            
            <!-- Individual day records for this user (collapsible) -->
            @if (IsUserGroupExpanded(userGroup.User))
            {
              @foreach (var r in userGroup.Records.OrderByDescending(x => x.Day))
              {
                <tr>
                  <td class="ps-4">@r.Day.ToString("yyyy-MM-dd")</td>
                  <td class="text-muted">@r.UserLogin</td>
                  <td class="text-end">@r.UserInitiatedInteractionCount.ToString("N0")</td>
                  <td class="text-end">@r.CodeGenerationActivityCount.ToString("N0")</td>
                  <td class="text-end">@r.CodeAcceptanceActivityCount.ToString("N0")</td>
                  <td class="text-end">@GetFeatureGenerations(r, "code_completion").ToString("N0")</td>
                  <td class="text-end">@GetFeatureGenerations(r, "chat_panel_agent_mode").ToString("N0")</td>
                  <td class="text-end">@GetFeatureGenerations(r, "chat_inline").ToString("N0")</td>
                  <td></td>
                  <td></td>
                  <td>
                    @if (compactView)
                    {
                      <small>@string.Join(", ", r.TotalsByFeature.Select(f=>DataService.GetFriendlyFeatureName(f.Feature)).Distinct())</small>
                    }
                    else
                    {
                      @RenderDailyFeatureBreakdown(r.TotalsByFeature)
                    }
                  </td>
                </tr>
              }
            }
          }
        </tbody>
      </table>
    </div>
  </div>
</div>

@code {
    private string search = string.Empty;
    private string sort = "TotalGenerations";
    private bool sortDesc = true;
    private HashSet<string> expandedUsers = new();
    private bool compactView = true; // Default to compact view

    [Parameter] public int RefreshKey { get; set; }

    private record UserGroup(
        string User, 
        IEnumerable<CopilotRecord> Records, 
        int TotalInteractions, 
        int TotalGenerations, 
        int TotalAcceptances, 
        string MostUsedLanguage, 
        string MostUsedModel,
        int CodeCompletionGenerations,
        int ChatAgentGenerations,
        int InlineChatGenerations
    );
    
    private record FeatureStats(string Feature, int TotalInteractions, int TotalGenerations, int TotalAcceptances);

    private void ToggleCompactView()
    {
        compactView = !compactView;
    }

    private void ToggleUserGroup(string user)
    {
        if (expandedUsers.Contains(user))
        {
            expandedUsers.Remove(user);
        }
        else
        {
            expandedUsers.Add(user);
        }
    }

    private bool IsUserGroupExpanded(string user)
    {
        return expandedUsers.Contains(user);
    }

    private void SortBy(string key)
    {
        if (sort == key) sortDesc = !sortDesc; else { sort = key; sortDesc = true; }
    }

    private RenderFragment SortIcon(string key) => builder =>
    {
        var isActive = sort == key || (key == "Interactions" && sort == "TotalInteractions") || 
                      (key == "Generations" && sort == "TotalGenerations") || 
                      (key == "Acceptances" && sort == "TotalAcceptances") ||
                      (key == "CodeCompletion") || (key == "ChatAgent") || (key == "InlineChat");
        if (!isActive) return;
        var icon = sortDesc ? "▼" : "▲";
        builder.AddContent(0, icon);
    };

    private int GetFeatureGenerations(CopilotRecord record, string featureName)
    {
        return record.TotalsByFeature
            .Where(f => string.Equals(f.Feature, featureName, StringComparison.OrdinalIgnoreCase))
            .Sum(f => f.CodeGenerationActivityCount);
    }

    private int GetUserFeatureGenerations(IEnumerable<CopilotRecord> records, string featureName)
    {
        return records
            .SelectMany(r => r.TotalsByFeature)
            .Where(f => string.Equals(f.Feature, featureName, StringComparison.OrdinalIgnoreCase))
            .Sum(f => f.CodeGenerationActivityCount);
    }

    private List<FeatureStats> GetUserFeatureStats(IEnumerable<CopilotRecord> records)
    {
        return records
            .SelectMany(r => r.TotalsByFeature)
            .GroupBy(f => f.Feature)
            .Select(g => new FeatureStats(
                g.Key,
                g.Sum(f => f.UserInitiatedInteractionCount),
                g.Sum(f => f.CodeGenerationActivityCount),
                g.Sum(f => f.CodeAcceptanceActivityCount)
            ))
            .ToList();
    }

    private RenderFragment RenderUserFeatureBreakdown(IEnumerable<CopilotRecord> records) => builder =>
    {
        var userFeatureStats = GetUserFeatureStats(records);
        if (!userFeatureStats.Any()) return;
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "feature-breakdown");
        
        foreach (var featureStat in userFeatureStats.OrderByDescending(f => f.TotalGenerations))
        {
            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "mb-1");
            
            builder.OpenElement(4, "strong");
            builder.AddAttribute(5, "class", "text-primary");
            builder.AddContent(6, DataService.GetFriendlyFeatureName(featureStat.Feature));
            builder.CloseElement();
            
            builder.AddMarkupContent(7, "<br />");
            
            builder.OpenElement(8, "small");
            builder.AddAttribute(9, "class", "text-muted");
            builder.AddContent(10, $"Interactions: {featureStat.TotalInteractions:N0} | Generations: {featureStat.TotalGenerations:N0} | Acceptances: {featureStat.TotalAcceptances:N0}");
            builder.CloseElement();
            
            builder.CloseElement();
        }
        
        builder.CloseElement();
    };

    private RenderFragment RenderDailyFeatureBreakdown(List<FeatureTotals> features) => builder =>
    {
        if (!features.Any()) return;
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "feature-breakdown-daily");
        
        foreach (var feature in features.OrderByDescending(f => f.CodeGenerationActivityCount))
        {
            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "mb-1");
            
            builder.OpenElement(4, "small");
            builder.AddAttribute(5, "class", "text-primary fw-bold");
            builder.AddContent(6, DataService.GetFriendlyFeatureName(feature.Feature));
            builder.CloseElement();
            
            builder.AddMarkupContent(7, "<br />");
            
            builder.OpenElement(8, "small");
            builder.AddAttribute(9, "class", "text-muted");
            builder.AddAttribute(10, "style", "font-size: 0.7rem;");
            builder.AddContent(11, $"I: {feature.UserInitiatedInteractionCount} | G: {feature.CodeGenerationActivityCount} | A: {feature.CodeAcceptanceActivityCount}");
            builder.CloseElement();
            
            builder.CloseElement();
        }
        
        builder.CloseElement();
    };

    private IEnumerable<UserGroup> GetUserGroups()
    {
        var q = Data.GetFiltered();
        if (!string.IsNullOrWhiteSpace(search))
        {
            q = q.Where(r => (r.UserLogin?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        var userGroups = q.GroupBy(r => r.UserLogin)
            .Select(g => new UserGroup(
                g.Key,
                g,
                g.Sum(r => r.UserInitiatedInteractionCount),
                g.Sum(r => r.CodeGenerationActivityCount),
                g.Sum(r => r.CodeAcceptanceActivityCount),
                Data.GetMostUsedLanguageForUser(g.Key),
                Data.GetMostUsedModelForUser(g.Key),
                GetUserFeatureGenerations(g, "code_completion"),
                GetUserFeatureGenerations(g, "chat_panel_agent_mode"),
                GetUserFeatureGenerations(g, "chat_inline")
            ));

        userGroups = sort switch
        {
            nameof(CopilotRecord.UserLogin) => sortDesc ? userGroups.OrderByDescending(g => g.User) : userGroups.OrderBy(g => g.User),
            "Interactions" or "TotalInteractions" => sortDesc ? userGroups.OrderByDescending(g => g.TotalInteractions) : userGroups.OrderBy(g => g.TotalInteractions),
            "Generations" or "TotalGenerations" => sortDesc ? userGroups.OrderByDescending(g => g.TotalGenerations) : userGroups.OrderBy(g => g.TotalGenerations),
            "Acceptances" or "TotalAcceptances" => sortDesc ? userGroups.OrderByDescending(g => g.TotalAcceptances) : userGroups.OrderBy(g => g.TotalAcceptances),
            "CodeCompletion" => sortDesc ? userGroups.OrderByDescending(g => g.CodeCompletionGenerations) : userGroups.OrderBy(g => g.CodeCompletionGenerations),
            "ChatAgent" => sortDesc ? userGroups.OrderByDescending(g => g.ChatAgentGenerations) : userGroups.OrderBy(g => g.ChatAgentGenerations),
            "InlineChat" => sortDesc ? userGroups.OrderByDescending(g => g.InlineChatGenerations) : userGroups.OrderBy(g => g.InlineChatGenerations),
            _ => sortDesc ? userGroups.OrderByDescending(g => g.Records.Max(r => r.Day)) : userGroups.OrderBy(g => g.Records.Max(r => r.Day))
        };

        return userGroups;
    }
}