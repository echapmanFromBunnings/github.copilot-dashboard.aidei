@using copiloty_stats_viewer.Models
@using copiloty_stats_viewer.Services
@inject DataService Data

<div class="card mb-3">
  <div class="card-body">
    <div class="d-flex justify-content-between align-items-center mb-2">
      <strong>Records (Grouped by User)</strong>
      <input class="form-control w-auto" style="min-width:260px" placeholder="Search user/login..." @bind="search" />
    </div>
    <div class="table-responsive">
      <table class="table table-sm table-hover">
        <thead>
          <tr>
            <th role="button" @onclick="() => SortBy(nameof(CopilotRecord.Day))">Day @SortIcon(nameof(CopilotRecord.Day))</th>
            <th role="button" @onclick="() => SortBy(nameof(CopilotRecord.UserLogin))">User @SortIcon(nameof(CopilotRecord.UserLogin))</th>
            <th class="text-end" role="button" @onclick='() => SortBy("Interactions")'>Interactions @SortIcon("Interactions")</th>
            <th class="text-end" role="button" @onclick='() => SortBy("Generations")'>Generations @SortIcon("Generations")</th>
            <th class="text-end" role="button" @onclick='() => SortBy("Acceptances")'>Acceptances @SortIcon("Acceptances")</th>
            <th>Features</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var userGroup in GetUserGroups())
          {
            <!-- User group header row (clickable to expand/collapse) -->
            <tr class="table-secondary" role="button" @onclick="() => ToggleUserGroup(userGroup.User)" style="cursor: pointer;">
              <td colspan="2">
                <strong>
                  <span class="@(IsUserGroupExpanded(userGroup.User) ? "oi oi-chevron-bottom" : "oi oi-chevron-right")" aria-hidden="true"></span>
                  <span class="oi oi-person ms-1" aria-hidden="true"></span> @userGroup.User 
                  <small class="text-muted">(@userGroup.Records.Count() records)</small>
                </strong>
              </td>
              <td class="text-end"><strong>@userGroup.TotalInteractions.ToString("N0")</strong></td>
              <td class="text-end"><strong>@userGroup.TotalGenerations.ToString("N0")</strong></td>
              <td class="text-end"><strong>@userGroup.TotalAcceptances.ToString("N0")</strong></td>
              <td>
                <small class="text-muted">
                  @string.Join(", ", userGroup.Records.SelectMany(r => r.TotalsByFeature.Select(f => DataService.GetFriendlyFeatureName(f.Feature))).Distinct())
                </small>
              </td>
            </tr>
            
            <!-- Individual day records for this user (collapsible) -->
            @if (IsUserGroupExpanded(userGroup.User))
            {
              @foreach (var r in userGroup.Records.OrderByDescending(x => x.Day))
              {
                <tr>
                  <td class="ps-4">@r.Day.ToString("yyyy-MM-dd")</td>
                  <td class="text-muted">@r.UserLogin</td>
                  <td class="text-end">@r.UserInitiatedInteractionCount.ToString("N0")</td>
                  <td class="text-end">@r.CodeGenerationActivityCount.ToString("N0")</td>
                  <td class="text-end">@r.CodeAcceptanceActivityCount.ToString("N0")</td>
                  <td>
                    <small>@string.Join(", ", r.TotalsByFeature.Select(f=>DataService.GetFriendlyFeatureName(f.Feature)).Distinct())</small>
                  </td>
                </tr>
              }
            }
          }
        </tbody>
      </table>
    </div>
  </div>
</div>

@code {
    private string search = string.Empty;
    private string sort = "TotalGenerations";
    private bool sortDesc = true;
    private HashSet<string> expandedUsers = new();

    [Parameter] public int RefreshKey { get; set; }

    private record UserGroup(string User, IEnumerable<CopilotRecord> Records, int TotalInteractions, int TotalGenerations, int TotalAcceptances);

    private void ToggleUserGroup(string user)
    {
        if (expandedUsers.Contains(user))
        {
            expandedUsers.Remove(user);
        }
        else
        {
            expandedUsers.Add(user);
        }
    }

    private bool IsUserGroupExpanded(string user)
    {
        return expandedUsers.Contains(user);
    }

    private IEnumerable<UserGroup> GetUserGroups()
    {
        var q = Data.GetFiltered();
        if (!string.IsNullOrWhiteSpace(search))
        {
            q = q.Where(r => (r.UserLogin?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        var userGroups = q.GroupBy(r => r.UserLogin)
            .Select(g => new UserGroup(
                g.Key,
                g,
                g.Sum(r => r.UserInitiatedInteractionCount),
                g.Sum(r => r.CodeGenerationActivityCount),
                g.Sum(r => r.CodeAcceptanceActivityCount)
            ));

        userGroups = sort switch
        {
            nameof(CopilotRecord.UserLogin) => sortDesc ? userGroups.OrderByDescending(g => g.User) : userGroups.OrderBy(g => g.User),
            "Interactions" or "TotalInteractions" => sortDesc ? userGroups.OrderByDescending(g => g.TotalInteractions) : userGroups.OrderBy(g => g.TotalInteractions),
            "Generations" or "TotalGenerations" => sortDesc ? userGroups.OrderByDescending(g => g.TotalGenerations) : userGroups.OrderBy(g => g.TotalGenerations),
            "Acceptances" or "TotalAcceptances" => sortDesc ? userGroups.OrderByDescending(g => g.TotalAcceptances) : userGroups.OrderBy(g => g.TotalAcceptances),
            _ => sortDesc ? userGroups.OrderByDescending(g => g.Records.Max(r => r.Day)) : userGroups.OrderBy(g => g.Records.Max(r => r.Day))
        };

        return userGroups;
    }

    private void SortBy(string key)
    {
        if (sort == key) sortDesc = !sortDesc; else { sort = key; sortDesc = true; }
    }

    private RenderFragment SortIcon(string key) => builder =>
    {
        var isActive = sort == key || (key == "Interactions" && sort == "TotalInteractions") || 
                      (key == "Generations" && sort == "TotalGenerations") || 
                      (key == "Acceptances" && sort == "TotalAcceptances");
        if (!isActive) return;
        var icon = sortDesc ? "▼" : "▲";
        builder.AddContent(0, icon);
    };
}