using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using copiloty_stats_viewer.Services;

namespace copiloty_stats_viewer.Services;

public class PdfReportService
{
    private readonly DataService _dataService;
    
    public record UserGroup(string User, List<copiloty_stats_viewer.Models.CopilotRecord> Records, 
                           int TotalInteractions, int TotalGenerations, int TotalAcceptances);

    public PdfReportService(DataService dataService)
    {
        _dataService = dataService;
        
        // Configure QuestPDF license (Community license)
        QuestPDF.Settings.License = LicenseType.Community;
    }

    public byte[] GenerateReport(int costPerHour = 90, int totalLicensedUsers = 0)
    {
        // Set the total licensed users if provided
        if (totalLicensedUsers > 0)
        {
            _dataService.SetTotalLicensedUsers(totalLicensedUsers);
        }
        var aidei = _dataService.GetAIDEI();
        var engineering = _dataService.GetEngineeringMetrics();
        var adoption = _dataService.GetAdoption();
        var totals = _dataService.GetTotals();
        
        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(1, Unit.Centimetre);
                page.PageColor(Colors.White);
                page.DefaultTextStyle(x => x.FontSize(10).FontFamily("Arial"));
                
                page.Header()
                    .Height(50, Unit.Point)
                    .Background("#005358")
                    .AlignCenter()
                    .AlignMiddle()
                    .Text($"Copilot Stats Report - {DateTime.Now:yyyy-MM-dd HH:mm}")
                    .FontSize(16)
                    .FontColor(Colors.White)
                    .Bold();

                page.Content()
                    .PaddingVertical(20)
                    .Column(column =>
                    {
                        // Quick Wins Dashboard
                        column.Item().Element(container => CreateQuickWinsSection(container, aidei, engineering, costPerHour));
                        
                        column.Item().PaddingTop(20).Element(container => CreateAIDEISection(container, aidei));
                        
                        column.Item().PaddingTop(20).Element(container => CreateEngineeringMetricsSection(container, engineering));
                        
                        column.Item().PaddingTop(20).Element(container => CreateUsageSection(container, adoption, totals));
                        
                        column.Item().PaddingTop(20).Element(container => CreateChartsSection(container));
                        
                        column.Item().PaddingTop(20).Element(container => CreateDataTableSection(container));
                    });

                page.Footer()
                    .Height(30, Unit.Point)
                    .AlignCenter()
                    .DefaultTextStyle(x => x.FontSize(8).FontColor(Colors.Grey.Darken1))
                    .Text(text =>
                    {
                        text.Span("Generated by Copilot Stats Explorer - Page ");
                        text.CurrentPageNumber();
                        text.Span(" of ");
                        text.TotalPages();
                    });
            });
        });

        return document.GeneratePdf();
    }

    private void CreateChartsSection(IContainer container)
    {
        container.Column(column =>
        {
            column.Item().Text("Data Visualizations").FontSize(14).Bold().FontColor("#005358");
            
            // Time Series Data
            var timeSeries = _dataService.GetTimeSeries().OrderBy(x => x.Day).Take(30).ToList();
            if (timeSeries.Any())
            {
                column.Item().PaddingTop(10).Column(timeSeriesCol =>
                {
                    timeSeriesCol.Item().Text("AI Activity Over Time (Last 30 Days)").FontSize(12).Bold().FontColor("#005358");
                    timeSeriesCol.Item().PaddingTop(5).Element(container => CreateTimeSeriesChart(container, timeSeries));
                });
            }
            
            // Feature Mix
            var features = _dataService.FeatureMix().Take(10).ToList();
            if (features.Any())
            {
                column.Item().PaddingTop(15).Column(featureCol =>
                {
                    featureCol.Item().Text("Top Features by Usage").FontSize(12).Bold().FontColor("#005358");
                    featureCol.Item().PaddingTop(5).Element(container => CreateFeatureMixChart(container, features));
                });
            }
            
            // Model Mix
            var models = _dataService.ModelMix().Take(10).ToList();
            if (models.Any())
            {
                column.Item().PaddingTop(15).Column(modelCol =>
                {
                    modelCol.Item().Text("Top Models by Usage").FontSize(12).Bold().FontColor("#005358");
                    modelCol.Item().PaddingTop(5).Element(container => CreateModelMixChart(container, models));
                });
            }
            
            // Top Users
            var topUsers = _dataService.TopUsers().Take(10).ToList();
            if (topUsers.Any())
            {
                column.Item().PaddingTop(15).Column(userCol =>
                {
                    userCol.Item().Text("Top Users by Code Generations").FontSize(12).Bold().FontColor("#005358");
                    userCol.Item().PaddingTop(5).Element(container => CreateTopUsersChart(container, topUsers));
                });
            }
        });
    }

    private void CreateTimeSeriesChart(IContainer container, List<DataService.TimeSeriesPoint> timeSeries)
    {
        container.Border(1).BorderColor(new Color(005358)).Padding(10).Column(column =>
        {
            // Header row
            column.Item().Row(row =>
            {
                row.ConstantItem(80).Text("Date").FontSize(8).Bold();
                row.RelativeItem().Text("Interactions").FontSize(8).Bold().AlignCenter();
                row.RelativeItem().Text("Generations").FontSize(8).Bold().AlignCenter();
                row.RelativeItem().Text("Acceptances").FontSize(8).Bold().AlignCenter();
            });
            
            column.Item().PaddingTop(2).LineHorizontal(1).LineColor(Colors.Grey.Lighten1);
            
            // Data rows - show all days
            var displayData = timeSeries;
            foreach (var item in displayData)
            {
                column.Item().PaddingTop(2).Row(row =>
                {
                    row.ConstantItem(80).Text(item.Day.ToString("MM/dd")).FontSize(7);
                    row.RelativeItem().Text(item.Interactions.ToString("N0")).FontSize(7).AlignCenter();
                    row.RelativeItem().Text(item.Generations.ToString("N0")).FontSize(7).AlignCenter();
                    row.RelativeItem().Text(item.Acceptances.ToString("N0")).FontSize(7).AlignCenter();
                });
            }
        });
    }

    private void CreateFeatureMixChart(IContainer container, List<(string Feature, int Generations)> features)
    {
        container.Border(1).BorderColor(Colors.Grey.Lighten1).Padding(10).Column(column =>
        {
            var maxGenerations = features.Max(f => f.Generations);
            
            foreach (var feature in features)
            {
                var barWidth = Math.Max(5, (feature.Generations * 100) / Math.Max(maxGenerations, 1));
                column.Item().PaddingTop(3).Row(row =>
                {
                    row.ConstantItem(120).Text(DataService.GetFriendlyFeatureName(feature.Feature)).FontSize(8);
                    row.RelativeItem().Column(col =>
                    {
                        col.Item().Row(barRow =>
                        {
                            barRow.ConstantItem(barWidth, Unit.Point).Height(12).Background("#7CB342"); // Professional green
                            barRow.RelativeItem();
                        });
                    });
                    row.ConstantItem(50).Text(feature.Generations.ToString("N0")).FontSize(8).AlignRight();
                });
            }
        });
    }

    private void CreateModelMixChart(IContainer container, List<(string Model, int Generations)> models)
    {
        container.Border(1).BorderColor(Colors.Grey.Lighten1).Padding(10).Column(column =>
        {
            var maxGenerations = models.Max(m => m.Generations);
            
            foreach (var model in models)
            {
                var barWidth = Math.Max(5, (model.Generations * 100) / Math.Max(maxGenerations, 1));
                column.Item().PaddingTop(3).Row(row =>
                {
                    row.ConstantItem(120).Text(model.Model).FontSize(8);
                    row.RelativeItem().Column(col =>
                    {
                        col.Item().Row(barRow =>
                        {
                            barRow.ConstantItem(barWidth, Unit.Point).Height(12).Background("#42A5F5"); // Professional blue
                            barRow.RelativeItem();
                        });
                    });
                    row.ConstantItem(50).Text(model.Generations.ToString("N0")).FontSize(8).AlignRight();
                });
            }
        });
    }

    private void CreateTopUsersChart(IContainer container, List<(string User, int Generations, int Acceptances)> topUsers)
    {
        container.Border(1).BorderColor(Colors.Grey.Lighten1).Padding(10).Column(column =>
        {
            var maxGenerations = topUsers.Max(u => u.Generations);
            
            foreach (var user in topUsers)
            {
                var barWidth = Math.Max(5, (user.Generations * 100) / Math.Max(maxGenerations, 1));
                column.Item().PaddingTop(3).Row(row =>
                {
                    row.ConstantItem(120).Text(user.User).FontSize(8);
                    row.RelativeItem().Column(col =>
                    {
                        col.Item().Row(barRow =>
                        {
                            barRow.ConstantItem(barWidth, Unit.Point).Height(12).Background("#FF7043"); // Professional orange
                            barRow.RelativeItem();
                        });
                    });
                    row.ConstantItem(50).Text(user.Generations.ToString("N0")).FontSize(8).AlignRight();
                });
            }
        });
    }

    private void CreateDataTableSection(IContainer container)
    {
        container.Column(column =>
        {
            column.Item().Text("User Activity Summary (Grouped)").FontSize(14).Bold().FontColor("#005358");
            column.Item().PaddingBottom(5).Text("All users by total activity").FontSize(9).FontColor(Colors.Grey.Darken1);
            
            // Get grouped user data
            var userGroups = _dataService.GetFiltered()
                .GroupBy(r => r.UserLogin)
                .Select(g => new UserGroup(
                    g.Key,
                    g.OrderByDescending(r => r.Day).ToList(),
                    g.Sum(r => r.UserInitiatedInteractionCount),
                    g.Sum(r => r.CodeGenerationActivityCount),
                    g.Sum(r => r.CodeAcceptanceActivityCount)
                ))
                .OrderByDescending(g => g.TotalGenerations)
                .ToList(); // Show all users

            if (userGroups.Any())
            {
                column.Item().PaddingTop(10).Element(container => CreateUserGroupTable(container, userGroups));
            }
        });
    }

    private void CreateUserGroupTable(IContainer container, List<UserGroup> userGroups)
    {
        container.Border(1).BorderColor(Colors.Grey.Lighten1).Column(column =>
        {
            // Table header
            column.Item().Background("#005358").Padding(8).Row(row =>
            {
                row.RelativeItem(2).Text("User").FontSize(9).Bold().FontColor(Colors.White);
                row.RelativeItem().Text("Days Active").FontSize(9).Bold().AlignCenter().FontColor(Colors.White);
                row.RelativeItem().Text("Interactions").FontSize(9).Bold().AlignCenter().FontColor(Colors.White);
                row.RelativeItem().Text("Generations").FontSize(9).Bold().AlignCenter().FontColor(Colors.White);
                row.RelativeItem().Text("Acceptances").FontSize(9).Bold().AlignCenter().FontColor(Colors.White);
                row.RelativeItem().Text("Acceptance Rate").FontSize(9).Bold().AlignCenter().FontColor(Colors.White);
            });

            foreach (var userGroup in userGroups)
            {
                var acceptanceRate = userGroup.TotalGenerations > 0 
                    ? (double)userGroup.TotalAcceptances / userGroup.TotalGenerations 
                    : 0.0;
                    
                // User summary row
                column.Item().Background(Colors.Grey.Lighten4).Padding(6).Row(row =>
                {
                    row.RelativeItem(2).Text($"👤 {userGroup.User}").FontSize(8).Bold();
                    row.RelativeItem().Text(userGroup.Records.Count.ToString()).FontSize(8).AlignCenter();
                    row.RelativeItem().Text(userGroup.TotalInteractions.ToString("N0")).FontSize(8).AlignCenter();
                    row.RelativeItem().Text(userGroup.TotalGenerations.ToString("N0")).FontSize(8).AlignCenter();
                    row.RelativeItem().Text(userGroup.TotalAcceptances.ToString("N0")).FontSize(8).AlignCenter();
                    row.RelativeItem().Text(acceptanceRate.ToString("P1")).FontSize(8).AlignCenter();
                });
                
                // Add separator line between users
                column.Item().PaddingTop(2).LineHorizontal(0.5f).LineColor(Colors.Grey.Lighten2);
            }
        });
    }

    private void CreateQuickWinsSection(IContainer container, DataService.AIDEIMetrics aidei, DataService.EngineeringMetrics engineering, int costPerHour)
    {
        container.Column(column =>
        {
            column.Item().Text("Quick Wins Dashboard").FontSize(14).Bold().FontColor("#005358");
            
            column.Item().PaddingTop(10).Row(row =>
            {
                row.RelativeItem().Element(container => CreateMetricCard(container, aidei.AIDEIScore.ToString("F1"), "AIDEI Score", "Overall AI enablement"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.UsageRate.ToString("P1"), "Usage Rate", "Active vs licensed"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.LicenseUtilization.ToString("P1"), "License Utilization", "Engaged users"));
            });
            
            column.Item().PaddingTop(10).Row(row =>
            {
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.UnusedSeats.ToString(), "Unused Seats", "Potential savings"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.EngagedUsersPercent.ToString("P1"), "Engaged Users", "Regular usage"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.PowerUsersPercent.ToString("P1"), "Power Users", "Heavy adopters"));
            });
            
            // Productivity Cost Savings
            var costSavings = engineering.EstimatedTimeSavedHours * costPerHour;
            column.Item().PaddingTop(10).Row(row =>
            {
                row.RelativeItem(2).Element(container => CreateMetricCard(container, 
                    $"${costSavings:N0}", 
                    "Productivity Cost Savings", 
                    $"{engineering.EstimatedTimeSavedHours:N0}h × ${costPerHour}/hr"));
                row.RelativeItem(1); // Empty space
            });
        });
    }

    private void CreateAIDEISection(IContainer container, DataService.AIDEIMetrics aidei)
    {
        container.Column(column =>
        {
            column.Item().Text("AIDEI Detailed Metrics").FontSize(14).Bold().FontColor("#005358");
            column.Item().PaddingBottom(5).Text("AI Development Enablement Index").FontSize(9).FontColor(Colors.Grey.Darken1);
            
            column.Item().PaddingTop(10).Row(row =>
            {
                row.RelativeItem().Element(container => CreateMetricCard(container, (aidei.AIDEIScore * 100).ToString("F1"), "AIDEI Score", "Composite index"));
                row.RelativeItem().Element(container => CreateMetricCard(container, aidei.AdoptionRate.ToString("P1"), "Adoption Rate", "Users with activity"));
                row.RelativeItem().Element(container => CreateMetricCard(container, aidei.AcceptanceRate.ToString("P1"), "Acceptance Rate", "Suggestions accepted"));
                row.RelativeItem().Element(container => CreateMetricCard(container, aidei.LicensedVsEngagedRate.ToString("P1"), "Licensed vs Engaged", "Meaningful usage"));
                row.RelativeItem().Element(container => CreateMetricCard(container, GetAIDEIGrade(aidei.AIDEIScore), "AIDEI Grade", "Letter grade"));
            });
        });
    }

    private void CreateEngineeringMetricsSection(IContainer container, DataService.EngineeringMetrics engineering)
    {
        container.Column(column =>
        {
            column.Item().Text("Advanced Engineering Metrics").FontSize(14).Bold().FontColor("#005358");
            
            column.Item().PaddingTop(10).Row(row =>
            {
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.MedianAcceptanceRate.ToString("P1"), "Median Acceptance Rate", "Quality indicator"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.AcceptancesPerActiveUserPerDay.ToString("F1"), "Daily Acceptances/User", "Productivity metric"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.InlineSharePercent.ToString("P1"), "Inline Usage", "Feature adoption"));
            });
            
            column.Item().PaddingTop(10).Row(row =>
            {
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.ChatAdoptionPercent.ToString("P1"), "Chat Adoption", "AI interaction"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.ModelLeaderMargin.ToString("P1"), "Model Leader Margin", "Distribution metric"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.ConcentrationIndex.ToString("F2"), "Usage Concentration", "Gini coefficient"));
            });
            
            column.Item().PaddingTop(10).Row(row =>
            {
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.RampRateUsersPerWeek.ToString("F1"), "Weekly Growth Rate", "New users/week"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.TimeToFirstValueDays.ToString("F1"), "Time to First Value", "Days to adoption"));
                row.RelativeItem().Element(container => CreateMetricCard(container, engineering.LanguageCoveragePercent.ToString("P1"), "Language Coverage", "Supported languages"));
            });
        });
    }

    private void CreateUsageSection(IContainer container, DataService.AdoptionStats adoption, DataService.Totals totals)
    {
        container.Column(column =>
        {
            column.Item().Text("Usage Summary").FontSize(14).Bold().FontColor("#005358");
            
            column.Item().PaddingTop(10).Row(row =>
            {
                // Adoption Stats
                row.RelativeItem().Column(col =>
                {
                    col.Item().Text("Adoption").FontSize(12).Bold().FontColor("#005358");
                    col.Item().PaddingTop(5).Row(metricRow =>
                    {
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, adoption.ActiveUsers.ToString(), "Active Users"));
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, adoption.UsingChat.ToString(), "Using Chat"));
                    });
                    col.Item().PaddingTop(5).Row(metricRow =>
                    {
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, adoption.UsingInline.ToString(), "Using Inline"));
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, adoption.UsingCompletions.ToString(), "Using Completions"));
                    });
                });
                
                // Usage Totals
                row.RelativeItem().Column(col =>
                {
                    col.Item().Text("Usage Totals").FontSize(12).Bold().FontColor("#005358");
                    col.Item().PaddingTop(5).Row(metricRow =>
                    {
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, totals.Interactions.ToString("N0"), "Interactions"));
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, totals.Generations.ToString("N0"), "Generations"));
                    });
                    col.Item().PaddingTop(5).Row(metricRow =>
                    {
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, totals.Acceptances.ToString("N0"), "Acceptances"));
                        metricRow.RelativeItem().Element(container => CreateSmallMetricCard(container, totals.AcceptanceRate.ToString("P1"), "Acceptance Rate"));
                    });
                });
            });
        });
    }

    private void CreateMetricCard(IContainer container, string value, string label, string description)
    {
        container.Border(1).BorderColor(Colors.Grey.Lighten1).Padding(8).Column(column =>
        {
            column.Item().Text(value).FontSize(16).Bold().FontColor("#005358");
            column.Item().PaddingTop(2).Text(label).FontSize(9).Bold();
            column.Item().Text(description).FontSize(7).FontColor(Colors.Grey.Darken1);
        });
    }

    private void CreateSmallMetricCard(IContainer container, string value, string label)
    {
        container.Border(1).BorderColor(Colors.Grey.Lighten1).Padding(6).Column(column =>
        {
            column.Item().Text(value).FontSize(12).Bold().FontColor("#005358");
            column.Item().Text(label).FontSize(8);
        });
    }

    private string GetAIDEIGrade(double score)
    {
        var percentage = score * 100;
        return percentage switch
        {
            >= 90 => "A+",
            >= 80 => "A",
            >= 70 => "B+",
            >= 60 => "B",
            >= 50 => "C+",
            >= 40 => "C",
            >= 30 => "D",
            _ => "F"
        };
    }
}